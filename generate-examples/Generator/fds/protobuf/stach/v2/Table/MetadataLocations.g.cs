// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: fds/protobuf/stach/v2/table/MetadataLocations.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace FactSet.Protobuf.Stach.V2.Table {

  /// <summary>Holder for reflection information generated from fds/protobuf/stach/v2/table/MetadataLocations.proto</summary>
  public static partial class MetadataLocationsReflection {

    #region Descriptor
    /// <summary>File descriptor for fds/protobuf/stach/v2/table/MetadataLocations.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MetadataLocationsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjNmZHMvcHJvdG9idWYvc3RhY2gvdjIvdGFibGUvTWV0YWRhdGFMb2NhdGlv",
            "bnMucHJvdG8SH2ZhY3RzZXQucHJvdG9idWYuc3RhY2gudjIudGFibGUaMGZk",
            "cy9wcm90b2J1Zi9zdGFjaC92Mi90YWJsZS9MaXN0T2ZNZXRhZGF0YS5wcm90",
            "byL7BgoRTWV0YWRhdGFMb2NhdGlvbnMSDQoFdGFibGUYASADKAkSUAoHY29s",
            "dW1ucxgCIAMoCzI/LmZhY3RzZXQucHJvdG9idWYuc3RhY2gudjIudGFibGUu",
            "TWV0YWRhdGFMb2NhdGlvbnMuQ29sdW1uc0VudHJ5EkoKBHJvd3MYAyADKAsy",
            "PC5mYWN0c2V0LnByb3RvYnVmLnN0YWNoLnYyLnRhYmxlLk1ldGFkYXRhTG9j",
            "YXRpb25zLlJvd3NFbnRyeRJQCgVjZWxscxgEIAEoCzJBLmZhY3RzZXQucHJv",
            "dG9idWYuc3RhY2gudjIudGFibGUuTWV0YWRhdGFMb2NhdGlvbnMuQ2VsbHND",
            "b2x1bW5NYXAa4QEKDkNlbGxzQ29sdW1uTWFwEl8KB2NvbHVtbnMYASADKAsy",
            "Ti5mYWN0c2V0LnByb3RvYnVmLnN0YWNoLnYyLnRhYmxlLk1ldGFkYXRhTG9j",
            "YXRpb25zLkNlbGxzQ29sdW1uTWFwLkNvbHVtbnNFbnRyeRpuCgxDb2x1bW5z",
            "RW50cnkSCwoDa2V5GAEgASgJEk0KBXZhbHVlGAIgASgLMj4uZmFjdHNldC5w",
            "cm90b2J1Zi5zdGFjaC52Mi50YWJsZS5NZXRhZGF0YUxvY2F0aW9ucy5DZWxs",
            "c1Jvd01hcDoCOAEawwEKC0NlbGxzUm93TWFwElYKBHJvd3MYASADKAsySC5m",
            "YWN0c2V0LnByb3RvYnVmLnN0YWNoLnYyLnRhYmxlLk1ldGFkYXRhTG9jYXRp",
            "b25zLkNlbGxzUm93TWFwLlJvd3NFbnRyeRpcCglSb3dzRW50cnkSCwoDa2V5",
            "GAEgASgJEj4KBXZhbHVlGAIgASgLMi8uZmFjdHNldC5wcm90b2J1Zi5zdGFj",
            "aC52Mi50YWJsZS5MaXN0T2ZNZXRhZGF0YToCOAEaXwoMQ29sdW1uc0VudHJ5",
            "EgsKA2tleRgBIAEoCRI+CgV2YWx1ZRgCIAEoCzIvLmZhY3RzZXQucHJvdG9i",
            "dWYuc3RhY2gudjIudGFibGUuTGlzdE9mTWV0YWRhdGE6AjgBGlwKCVJvd3NF",
            "bnRyeRILCgNrZXkYASABKAkSPgoFdmFsdWUYAiABKAsyLy5mYWN0c2V0LnBy",
            "b3RvYnVmLnN0YWNoLnYyLnRhYmxlLkxpc3RPZk1ldGFkYXRhOgI4AUKjAQoj",
            "Y29tLmZhY3RzZXQucHJvdG9idWYuc3RhY2gudjIudGFibGVCFk1ldGFkYXRh",
            "TG9jYXRpb25zUHJvdG9aQmdpdGh1Yi5jb20vZmFjdHNldC9zdGFjaHNjaGVt",
            "YS1zZGtzL2dvL2Zkcy9wcm90b2J1Zi9zdGFjaC92Mi90YWJsZaoCH0ZhY3RT",
            "ZXQuUHJvdG9idWYuU3RhY2guVjIuVGFibGViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::FactSet.Protobuf.Stach.V2.Table.ListOfMetadataReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::FactSet.Protobuf.Stach.V2.Table.MetadataLocations), global::FactSet.Protobuf.Stach.V2.Table.MetadataLocations.Parser, new[]{ "Table", "Columns", "Rows", "Cells" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::FactSet.Protobuf.Stach.V2.Table.MetadataLocations.Types.CellsColumnMap), global::FactSet.Protobuf.Stach.V2.Table.MetadataLocations.Types.CellsColumnMap.Parser, new[]{ "Columns" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::FactSet.Protobuf.Stach.V2.Table.MetadataLocations.Types.CellsRowMap), global::FactSet.Protobuf.Stach.V2.Table.MetadataLocations.Types.CellsRowMap.Parser, new[]{ "Rows" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// The metadata locations for a table
  /// </summary>
  public sealed partial class MetadataLocations : pb::IMessage<MetadataLocations> {
    private static readonly pb::MessageParser<MetadataLocations> _parser = new pb::MessageParser<MetadataLocations>(() => new MetadataLocations());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MetadataLocations> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::FactSet.Protobuf.Stach.V2.Table.MetadataLocationsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MetadataLocations() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MetadataLocations(MetadataLocations other) : this() {
      table_ = other.table_.Clone();
      columns_ = other.columns_.Clone();
      rows_ = other.rows_.Clone();
      cells_ = other.cells_ != null ? other.cells_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MetadataLocations Clone() {
      return new MetadataLocations(this);
    }

    /// <summary>Field number for the "table" field.</summary>
    public const int TableFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_table_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> table_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The array (metadata item id) of metadata items associated with the whole table
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Table {
      get { return table_; }
    }

    /// <summary>Field number for the "columns" field.</summary>
    public const int ColumnsFieldNumber = 2;
    private static readonly pbc::MapField<string, global::FactSet.Protobuf.Stach.V2.Table.ListOfMetadata>.Codec _map_columns_codec
        = new pbc::MapField<string, global::FactSet.Protobuf.Stach.V2.Table.ListOfMetadata>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::FactSet.Protobuf.Stach.V2.Table.ListOfMetadata.Parser), 18);
    private readonly pbc::MapField<string, global::FactSet.Protobuf.Stach.V2.Table.ListOfMetadata> columns_ = new pbc::MapField<string, global::FactSet.Protobuf.Stach.V2.Table.ListOfMetadata>();
    /// <summary>
    /// The map (key: column id) of all metadata items associated with a column
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::FactSet.Protobuf.Stach.V2.Table.ListOfMetadata> Columns {
      get { return columns_; }
    }

    /// <summary>Field number for the "rows" field.</summary>
    public const int RowsFieldNumber = 3;
    private static readonly pbc::MapField<string, global::FactSet.Protobuf.Stach.V2.Table.ListOfMetadata>.Codec _map_rows_codec
        = new pbc::MapField<string, global::FactSet.Protobuf.Stach.V2.Table.ListOfMetadata>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::FactSet.Protobuf.Stach.V2.Table.ListOfMetadata.Parser), 26);
    private readonly pbc::MapField<string, global::FactSet.Protobuf.Stach.V2.Table.ListOfMetadata> rows_ = new pbc::MapField<string, global::FactSet.Protobuf.Stach.V2.Table.ListOfMetadata>();
    /// <summary>
    /// The map (key: row id) of all metadata items associated with a row
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::FactSet.Protobuf.Stach.V2.Table.ListOfMetadata> Rows {
      get { return rows_; }
    }

    /// <summary>Field number for the "cells" field.</summary>
    public const int CellsFieldNumber = 4;
    private global::FactSet.Protobuf.Stach.V2.Table.MetadataLocations.Types.CellsColumnMap cells_;
    /// <summary>
    /// The metadata items associated with specific cells
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::FactSet.Protobuf.Stach.V2.Table.MetadataLocations.Types.CellsColumnMap Cells {
      get { return cells_; }
      set {
        cells_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MetadataLocations);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MetadataLocations other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!table_.Equals(other.table_)) return false;
      if (!Columns.Equals(other.Columns)) return false;
      if (!Rows.Equals(other.Rows)) return false;
      if (!object.Equals(Cells, other.Cells)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= table_.GetHashCode();
      hash ^= Columns.GetHashCode();
      hash ^= Rows.GetHashCode();
      if (cells_ != null) hash ^= Cells.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      table_.WriteTo(output, _repeated_table_codec);
      columns_.WriteTo(output, _map_columns_codec);
      rows_.WriteTo(output, _map_rows_codec);
      if (cells_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Cells);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += table_.CalculateSize(_repeated_table_codec);
      size += columns_.CalculateSize(_map_columns_codec);
      size += rows_.CalculateSize(_map_rows_codec);
      if (cells_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cells);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MetadataLocations other) {
      if (other == null) {
        return;
      }
      table_.Add(other.table_);
      columns_.Add(other.columns_);
      rows_.Add(other.rows_);
      if (other.cells_ != null) {
        if (cells_ == null) {
          Cells = new global::FactSet.Protobuf.Stach.V2.Table.MetadataLocations.Types.CellsColumnMap();
        }
        Cells.MergeFrom(other.Cells);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            table_.AddEntriesFrom(input, _repeated_table_codec);
            break;
          }
          case 18: {
            columns_.AddEntriesFrom(input, _map_columns_codec);
            break;
          }
          case 26: {
            rows_.AddEntriesFrom(input, _map_rows_codec);
            break;
          }
          case 34: {
            if (cells_ == null) {
              Cells = new global::FactSet.Protobuf.Stach.V2.Table.MetadataLocations.Types.CellsColumnMap();
            }
            input.ReadMessage(Cells);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MetadataLocations message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// A message wrapper for a map of columns to `CellsRowMap`
      /// </summary>
      public sealed partial class CellsColumnMap : pb::IMessage<CellsColumnMap> {
        private static readonly pb::MessageParser<CellsColumnMap> _parser = new pb::MessageParser<CellsColumnMap>(() => new CellsColumnMap());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CellsColumnMap> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::FactSet.Protobuf.Stach.V2.Table.MetadataLocations.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CellsColumnMap() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CellsColumnMap(CellsColumnMap other) : this() {
          columns_ = other.columns_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CellsColumnMap Clone() {
          return new CellsColumnMap(this);
        }

        /// <summary>Field number for the "columns" field.</summary>
        public const int ColumnsFieldNumber = 1;
        private static readonly pbc::MapField<string, global::FactSet.Protobuf.Stach.V2.Table.MetadataLocations.Types.CellsRowMap>.Codec _map_columns_codec
            = new pbc::MapField<string, global::FactSet.Protobuf.Stach.V2.Table.MetadataLocations.Types.CellsRowMap>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::FactSet.Protobuf.Stach.V2.Table.MetadataLocations.Types.CellsRowMap.Parser), 10);
        private readonly pbc::MapField<string, global::FactSet.Protobuf.Stach.V2.Table.MetadataLocations.Types.CellsRowMap> columns_ = new pbc::MapField<string, global::FactSet.Protobuf.Stach.V2.Table.MetadataLocations.Types.CellsRowMap>();
        /// <summary>
        /// The map (key: column id) of columns to `CellsRowMap`
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, global::FactSet.Protobuf.Stach.V2.Table.MetadataLocations.Types.CellsRowMap> Columns {
          get { return columns_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CellsColumnMap);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CellsColumnMap other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!Columns.Equals(other.Columns)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= Columns.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          columns_.WriteTo(output, _map_columns_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += columns_.CalculateSize(_map_columns_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CellsColumnMap other) {
          if (other == null) {
            return;
          }
          columns_.Add(other.columns_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                columns_.AddEntriesFrom(input, _map_columns_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// A message wrapper for a map of rows to a list of metadata
      /// </summary>
      public sealed partial class CellsRowMap : pb::IMessage<CellsRowMap> {
        private static readonly pb::MessageParser<CellsRowMap> _parser = new pb::MessageParser<CellsRowMap>(() => new CellsRowMap());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CellsRowMap> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::FactSet.Protobuf.Stach.V2.Table.MetadataLocations.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CellsRowMap() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CellsRowMap(CellsRowMap other) : this() {
          rows_ = other.rows_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CellsRowMap Clone() {
          return new CellsRowMap(this);
        }

        /// <summary>Field number for the "rows" field.</summary>
        public const int RowsFieldNumber = 1;
        private static readonly pbc::MapField<string, global::FactSet.Protobuf.Stach.V2.Table.ListOfMetadata>.Codec _map_rows_codec
            = new pbc::MapField<string, global::FactSet.Protobuf.Stach.V2.Table.ListOfMetadata>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::FactSet.Protobuf.Stach.V2.Table.ListOfMetadata.Parser), 10);
        private readonly pbc::MapField<string, global::FactSet.Protobuf.Stach.V2.Table.ListOfMetadata> rows_ = new pbc::MapField<string, global::FactSet.Protobuf.Stach.V2.Table.ListOfMetadata>();
        /// <summary>
        /// The map (key: row id) of rows to a list of metadata
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, global::FactSet.Protobuf.Stach.V2.Table.ListOfMetadata> Rows {
          get { return rows_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CellsRowMap);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CellsRowMap other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!Rows.Equals(other.Rows)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= Rows.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          rows_.WriteTo(output, _map_rows_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += rows_.CalculateSize(_map_rows_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CellsRowMap other) {
          if (other == null) {
            return;
          }
          rows_.Add(other.rows_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                rows_.AddEntriesFrom(input, _map_rows_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
