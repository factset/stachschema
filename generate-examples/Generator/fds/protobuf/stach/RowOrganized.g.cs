// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: fds/protobuf/stach/RowOrganized.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace FactSet.Protobuf.Stach {

  /// <summary>Holder for reflection information generated from fds/protobuf/stach/RowOrganized.proto</summary>
  public static partial class RowOrganizedReflection {

    #region Descriptor
    /// <summary>File descriptor for fds/protobuf/stach/RowOrganized.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RowOrganizedReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiVmZHMvcHJvdG9idWYvc3RhY2gvUm93T3JnYW5pemVkLnByb3RvEhZmYWN0",
            "c2V0LnByb3RvYnVmLnN0YWNoGitmZHMvcHJvdG9idWYvc3RhY2gvdGFibGUv",
            "TWV0YWRhdGFJdGVtLnByb3RvGi1mZHMvcHJvdG9idWYvc3RhY2gvdGFibGUv",
            "Q2VsbERlZmluaXRpb24ucHJvdG8aL2Zkcy9wcm90b2J1Zi9zdGFjaC90YWJs",
            "ZS9Db2x1bW5EZWZpbml0aW9uLnByb3RvGhxnb29nbGUvcHJvdG9idWYvc3Ry",
            "dWN0LnByb3RvIqIWChNSb3dPcmdhbml6ZWRQYWNrYWdlEg8KB3ZlcnNpb24Y",
            "ASABKAkSRwoGdGFibGVzGAIgAygLMjcuZmFjdHNldC5wcm90b2J1Zi5zdGFj",
            "aC5Sb3dPcmdhbml6ZWRQYWNrYWdlLlRhYmxlc0VudHJ5GmAKC1RhYmxlc0Vu",
            "dHJ5EgsKA2tleRgBIAEoCRJACgV2YWx1ZRgCIAEoCzIxLmZhY3RzZXQucHJv",
            "dG9idWYuc3RhY2guUm93T3JnYW5pemVkUGFja2FnZS5UYWJsZToCOAEa9gEK",
            "BVRhYmxlEk8KCmRlZmluaXRpb24YASABKAsyOy5mYWN0c2V0LnByb3RvYnVm",
            "LnN0YWNoLlJvd09yZ2FuaXplZFBhY2thZ2UuVGFibGVEZWZpbml0aW9uElcK",
            "EmhlYWRlcnNfZGVmaW5pdGlvbhgCIAEoCzI7LmZhY3RzZXQucHJvdG9idWYu",
            "c3RhY2guUm93T3JnYW5pemVkUGFja2FnZS5UYWJsZURlZmluaXRpb24SQwoE",
            "ZGF0YRgDIAEoCzI1LmZhY3RzZXQucHJvdG9idWYuc3RhY2guUm93T3JnYW5p",
            "emVkUGFja2FnZS5UYWJsZURhdGEaUgoPVGFibGVEZWZpbml0aW9uEj8KB2Nv",
            "bHVtbnMYASADKAsyLi5mYWN0c2V0LnByb3RvYnVmLnN0YWNoLnRhYmxlLkNv",
            "bHVtbkRlZmluaXRpb24a5AMKCVRhYmxlRGF0YRI9CgRyb3dzGAEgAygLMi8u",
            "ZmFjdHNldC5wcm90b2J1Zi5zdGFjaC5Sb3dPcmdhbml6ZWRQYWNrYWdlLlJv",
            "dxJgCg50YWJsZV9tZXRhZGF0YRgCIAMoCzJILmZhY3RzZXQucHJvdG9idWYu",
            "c3RhY2guUm93T3JnYW5pemVkUGFja2FnZS5UYWJsZURhdGEuVGFibGVNZXRh",
            "ZGF0YUVudHJ5EmIKD2NvbHVtbl9tZXRhZGF0YRgDIAMoCzJJLmZhY3RzZXQu",
            "cHJvdG9idWYuc3RhY2guUm93T3JnYW5pemVkUGFja2FnZS5UYWJsZURhdGEu",
            "Q29sdW1uTWV0YWRhdGFFbnRyeRpgChJUYWJsZU1ldGFkYXRhRW50cnkSCwoD",
            "a2V5GAEgASgJEjkKBXZhbHVlGAIgASgLMiouZmFjdHNldC5wcm90b2J1Zi5z",
            "dGFjaC50YWJsZS5NZXRhZGF0YUl0ZW06AjgBGnAKE0NvbHVtbk1ldGFkYXRh",
            "RW50cnkSCwoDa2V5GAEgASgJEkgKBXZhbHVlGAIgASgLMjkuZmFjdHNldC5w",
            "cm90b2J1Zi5zdGFjaC5Sb3dPcmdhbml6ZWRQYWNrYWdlLk1hcE9mTWV0YWRh",
            "dGE6AjgBGrYGCgNSb3cSCgoCaWQYASABKAkSSQoIcm93X3R5cGUYAiABKA4y",
            "Ny5mYWN0c2V0LnByb3RvYnVmLnN0YWNoLlJvd09yZ2FuaXplZFBhY2thZ2Uu",
            "Um93LlJvd1R5cGUSKwoFY2VsbHMYAyABKAsyGi5nb29nbGUucHJvdG9idWYu",
            "TGlzdFZhbHVlSAASKQoGdmFsdWVzGAQgASgLMhcuZ29vZ2xlLnByb3RvYnVm",
            "LlN0cnVjdEgAElYKDGNlbGxfZGV0YWlscxgFIAMoCzJALmZhY3RzZXQucHJv",
            "dG9idWYuc3RhY2guUm93T3JnYW5pemVkUGFja2FnZS5Sb3cuQ2VsbERldGFp",
            "bHNFbnRyeRJjChNoZWFkZXJfY2VsbF9kZXRhaWxzGAYgAygLMkYuZmFjdHNl",
            "dC5wcm90b2J1Zi5zdGFjaC5Sb3dPcmdhbml6ZWRQYWNrYWdlLlJvdy5IZWFk",
            "ZXJDZWxsRGV0YWlsc0VudHJ5ElYKDHJvd19tZXRhZGF0YRgHIAMoCzJALmZh",
            "Y3RzZXQucHJvdG9idWYuc3RhY2guUm93T3JnYW5pemVkUGFja2FnZS5Sb3cu",
            "Um93TWV0YWRhdGFFbnRyeRpqChBDZWxsRGV0YWlsc0VudHJ5EgsKA2tleRgB",
            "IAEoCRJFCgV2YWx1ZRgCIAEoCzI2LmZhY3RzZXQucHJvdG9idWYuc3RhY2gu",
            "Um93T3JnYW5pemVkUGFja2FnZS5DZWxsRGV0YWlsOgI4ARp2ChZIZWFkZXJD",
            "ZWxsRGV0YWlsc0VudHJ5EgsKA2tleRgBIAEoCRJLCgV2YWx1ZRgCIAEoCzI8",
            "LmZhY3RzZXQucHJvdG9idWYuc3RhY2guUm93T3JnYW5pemVkUGFja2FnZS5I",
            "ZWFkZXJDZWxsRGV0YWlsOgI4ARpeChBSb3dNZXRhZGF0YUVudHJ5EgsKA2tl",
            "eRgBIAEoCRI5CgV2YWx1ZRgCIAEoCzIqLmZhY3RzZXQucHJvdG9idWYuc3Rh",
            "Y2gudGFibGUuTWV0YWRhdGFJdGVtOgI4ASIfCgdSb3dUeXBlEggKBEJvZHkQ",
            "ABIKCgZIZWFkZXIQAUIGCgRraW5kGqoCCgpDZWxsRGV0YWlsEhMKC2dyb3Vw",
            "X2xldmVsGAEgASgFEkUKD2NlbGxfZGVmaW5pdGlvbhgCIAEoCzIsLmZhY3Rz",
            "ZXQucHJvdG9idWYuc3RhY2gudGFibGUuQ2VsbERlZmluaXRpb24SXwoNY2Vs",
            "bF9tZXRhZGF0YRgDIAMoCzJILmZhY3RzZXQucHJvdG9idWYuc3RhY2guUm93",
            "T3JnYW5pemVkUGFja2FnZS5DZWxsRGV0YWlsLkNlbGxNZXRhZGF0YUVudHJ5",
            "Gl8KEUNlbGxNZXRhZGF0YUVudHJ5EgsKA2tleRgBIAEoCRI5CgV2YWx1ZRgC",
            "IAEoCzIqLmZhY3RzZXQucHJvdG9idWYuc3RhY2gudGFibGUuTWV0YWRhdGFJ",
            "dGVtOgI4ARrzAwoQSGVhZGVyQ2VsbERldGFpbBIPCgdjb2xzcGFuGAEgASgF",
            "Eg8KB3Jvd3NwYW4YAiABKAUSWAoGc291cmNlGAMgASgOMkguZmFjdHNldC5w",
            "cm90b2J1Zi5zdGFjaC5Sb3dPcmdhbml6ZWRQYWNrYWdlLkhlYWRlckNlbGxE",
            "ZXRhaWwuVGFibGVTb3VyY2USFAoMY29sdW1uX2luZGV4GAQgASgFEkUKD2Nl",
            "bGxfZGVmaW5pdGlvbhgFIAEoCzIsLmZhY3RzZXQucHJvdG9idWYuc3RhY2gu",
            "dGFibGUuQ2VsbERlZmluaXRpb24SZQoNY2VsbF9tZXRhZGF0YRgGIAMoCzJO",
            "LmZhY3RzZXQucHJvdG9idWYuc3RhY2guUm93T3JnYW5pemVkUGFja2FnZS5I",
            "ZWFkZXJDZWxsRGV0YWlsLkNlbGxNZXRhZGF0YUVudHJ5Gl8KEUNlbGxNZXRh",
            "ZGF0YUVudHJ5EgsKA2tleRgBIAEoCRI5CgV2YWx1ZRgCIAEoCzIqLmZhY3Rz",
            "ZXQucHJvdG9idWYuc3RhY2gudGFibGUuTWV0YWRhdGFJdGVtOgI4ASI+CgtU",
            "YWJsZVNvdXJjZRILCgdVTktOT1dOEAASCAoETk9ORRABEgsKB1BSSU1BUlkQ",
            "AhILCgdIRUFERVJTEAMavgEKDU1hcE9mTWV0YWRhdGESUwoFaXRlbXMYASAD",
            "KAsyRC5mYWN0c2V0LnByb3RvYnVmLnN0YWNoLlJvd09yZ2FuaXplZFBhY2th",
            "Z2UuTWFwT2ZNZXRhZGF0YS5JdGVtc0VudHJ5GlgKCkl0ZW1zRW50cnkSCwoD",
            "a2V5GAEgASgJEjkKBXZhbHVlGAIgASgLMiouZmFjdHNldC5wcm90b2J1Zi5z",
            "dGFjaC50YWJsZS5NZXRhZGF0YUl0ZW06AjgBQoEBChpjb20uZmFjdHNldC5w",
            "cm90b2J1Zi5zdGFjaEIRUm93T3JnYW5pemVkUHJvdG9aN2dpdGh1Yi5jb20v",
            "ZmFjdHNldC9zdGFjaHNjaGVtYS9nby92Mi9mZHMvcHJvdG9idWYvc3RhY2iq",
            "AhZGYWN0U2V0LlByb3RvYnVmLlN0YWNoYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::FactSet.Protobuf.Stach.Table.MetadataItemReflection.Descriptor, global::FactSet.Protobuf.Stach.Table.CellDefinitionReflection.Descriptor, global::FactSet.Protobuf.Stach.Table.ColumnDefinitionReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.StructReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::FactSet.Protobuf.Stach.RowOrganizedPackage), global::FactSet.Protobuf.Stach.RowOrganizedPackage.Parser, new[]{ "Version", "Tables" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, new pbr::GeneratedClrTypeInfo(typeof(global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.Table), global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.Table.Parser, new[]{ "Definition", "HeadersDefinition", "Data" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.TableDefinition), global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.TableDefinition.Parser, new[]{ "Columns" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.TableData), global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.TableData.Parser, new[]{ "Rows", "TableMetadata", "ColumnMetadata" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.Row), global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.Row.Parser, new[]{ "Id", "RowType", "Cells", "Values", "CellDetails", "HeaderCellDetails", "RowMetadata" }, new[]{ "Kind" }, new[]{ typeof(global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.Row.Types.RowType) }, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.CellDetail), global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.CellDetail.Parser, new[]{ "GroupLevel", "CellDefinition", "CellMetadata" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.HeaderCellDetail), global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.HeaderCellDetail.Parser, new[]{ "Colspan", "Rowspan", "Source", "ColumnIndex", "CellDefinition", "CellMetadata" }, null, new[]{ typeof(global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.HeaderCellDetail.Types.TableSource) }, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.MapOfMetadata), global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.MapOfMetadata.Parser, new[]{ "Items" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, })})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A row organized package of tables
  /// </summary>
  public sealed partial class RowOrganizedPackage : pb::IMessage<RowOrganizedPackage> {
    private static readonly pb::MessageParser<RowOrganizedPackage> _parser = new pb::MessageParser<RowOrganizedPackage>(() => new RowOrganizedPackage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RowOrganizedPackage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::FactSet.Protobuf.Stach.RowOrganizedReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RowOrganizedPackage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RowOrganizedPackage(RowOrganizedPackage other) : this() {
      version_ = other.version_;
      tables_ = other.tables_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RowOrganizedPackage Clone() {
      return new RowOrganizedPackage(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private string version_ = "";
    /// <summary>
    /// The version of the STACH schema. Formatted {major}.{minor}
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tables" field.</summary>
    public const int TablesFieldNumber = 2;
    private static readonly pbc::MapField<string, global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.Table>.Codec _map_tables_codec
        = new pbc::MapField<string, global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.Table>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.Table.Parser), 18);
    private readonly pbc::MapField<string, global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.Table> tables_ = new pbc::MapField<string, global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.Table>();
    /// <summary>
    /// The map (key: table id) of all tables
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.Table> Tables {
      get { return tables_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RowOrganizedPackage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RowOrganizedPackage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (!Tables.Equals(other.Tables)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      hash ^= Tables.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Version);
      }
      tables_.WriteTo(output, _map_tables_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      size += tables_.CalculateSize(_map_tables_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RowOrganizedPackage other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      tables_.Add(other.tables_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Version = input.ReadString();
            break;
          }
          case 18: {
            tables_.AddEntriesFrom(input, _map_tables_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the RowOrganizedPackage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// A row organized table
      /// </summary>
      public sealed partial class Table : pb::IMessage<Table> {
        private static readonly pb::MessageParser<Table> _parser = new pb::MessageParser<Table>(() => new Table());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Table> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::FactSet.Protobuf.Stach.RowOrganizedPackage.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Table() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Table(Table other) : this() {
          definition_ = other.definition_ != null ? other.definition_.Clone() : null;
          headersDefinition_ = other.headersDefinition_ != null ? other.headersDefinition_.Clone() : null;
          data_ = other.data_ != null ? other.data_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Table Clone() {
          return new Table(this);
        }

        /// <summary>Field number for the "definition" field.</summary>
        public const int DefinitionFieldNumber = 1;
        private global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.TableDefinition definition_;
        /// <summary>
        /// The definition
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.TableDefinition Definition {
          get { return definition_; }
          set {
            definition_ = value;
          }
        }

        /// <summary>Field number for the "headers_definition" field.</summary>
        public const int HeadersDefinitionFieldNumber = 2;
        private global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.TableDefinition headersDefinition_;
        /// <summary>
        /// The headers definition
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.TableDefinition HeadersDefinition {
          get { return headersDefinition_; }
          set {
            headersDefinition_ = value;
          }
        }

        /// <summary>Field number for the "data" field.</summary>
        public const int DataFieldNumber = 3;
        private global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.TableData data_;
        /// <summary>
        /// The data
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.TableData Data {
          get { return data_; }
          set {
            data_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Table);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Table other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Definition, other.Definition)) return false;
          if (!object.Equals(HeadersDefinition, other.HeadersDefinition)) return false;
          if (!object.Equals(Data, other.Data)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (definition_ != null) hash ^= Definition.GetHashCode();
          if (headersDefinition_ != null) hash ^= HeadersDefinition.GetHashCode();
          if (data_ != null) hash ^= Data.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (definition_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Definition);
          }
          if (headersDefinition_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(HeadersDefinition);
          }
          if (data_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Data);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (definition_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Definition);
          }
          if (headersDefinition_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(HeadersDefinition);
          }
          if (data_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Table other) {
          if (other == null) {
            return;
          }
          if (other.definition_ != null) {
            if (definition_ == null) {
              Definition = new global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.TableDefinition();
            }
            Definition.MergeFrom(other.Definition);
          }
          if (other.headersDefinition_ != null) {
            if (headersDefinition_ == null) {
              HeadersDefinition = new global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.TableDefinition();
            }
            HeadersDefinition.MergeFrom(other.HeadersDefinition);
          }
          if (other.data_ != null) {
            if (data_ == null) {
              Data = new global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.TableData();
            }
            Data.MergeFrom(other.Data);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (definition_ == null) {
                  Definition = new global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.TableDefinition();
                }
                input.ReadMessage(Definition);
                break;
              }
              case 18: {
                if (headersDefinition_ == null) {
                  HeadersDefinition = new global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.TableDefinition();
                }
                input.ReadMessage(HeadersDefinition);
                break;
              }
              case 26: {
                if (data_ == null) {
                  Data = new global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.TableData();
                }
                input.ReadMessage(Data);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// A table definition
      /// </summary>
      public sealed partial class TableDefinition : pb::IMessage<TableDefinition> {
        private static readonly pb::MessageParser<TableDefinition> _parser = new pb::MessageParser<TableDefinition>(() => new TableDefinition());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TableDefinition> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::FactSet.Protobuf.Stach.RowOrganizedPackage.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TableDefinition() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TableDefinition(TableDefinition other) : this() {
          columns_ = other.columns_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TableDefinition Clone() {
          return new TableDefinition(this);
        }

        /// <summary>Field number for the "columns" field.</summary>
        public const int ColumnsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::FactSet.Protobuf.Stach.Table.ColumnDefinition> _repeated_columns_codec
            = pb::FieldCodec.ForMessage(10, global::FactSet.Protobuf.Stach.Table.ColumnDefinition.Parser);
        private readonly pbc::RepeatedField<global::FactSet.Protobuf.Stach.Table.ColumnDefinition> columns_ = new pbc::RepeatedField<global::FactSet.Protobuf.Stach.Table.ColumnDefinition>();
        /// <summary>
        /// The column definitions
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::FactSet.Protobuf.Stach.Table.ColumnDefinition> Columns {
          get { return columns_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TableDefinition);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TableDefinition other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!columns_.Equals(other.columns_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= columns_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          columns_.WriteTo(output, _repeated_columns_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += columns_.CalculateSize(_repeated_columns_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TableDefinition other) {
          if (other == null) {
            return;
          }
          columns_.Add(other.columns_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                columns_.AddEntriesFrom(input, _repeated_columns_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// A table data
      /// </summary>
      public sealed partial class TableData : pb::IMessage<TableData> {
        private static readonly pb::MessageParser<TableData> _parser = new pb::MessageParser<TableData>(() => new TableData());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TableData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::FactSet.Protobuf.Stach.RowOrganizedPackage.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TableData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TableData(TableData other) : this() {
          rows_ = other.rows_.Clone();
          tableMetadata_ = other.tableMetadata_.Clone();
          columnMetadata_ = other.columnMetadata_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TableData Clone() {
          return new TableData(this);
        }

        /// <summary>Field number for the "rows" field.</summary>
        public const int RowsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.Row> _repeated_rows_codec
            = pb::FieldCodec.ForMessage(10, global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.Row.Parser);
        private readonly pbc::RepeatedField<global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.Row> rows_ = new pbc::RepeatedField<global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.Row>();
        /// <summary>
        /// The rows
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.Row> Rows {
          get { return rows_; }
        }

        /// <summary>Field number for the "table_metadata" field.</summary>
        public const int TableMetadataFieldNumber = 2;
        private static readonly pbc::MapField<string, global::FactSet.Protobuf.Stach.Table.MetadataItem>.Codec _map_tableMetadata_codec
            = new pbc::MapField<string, global::FactSet.Protobuf.Stach.Table.MetadataItem>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::FactSet.Protobuf.Stach.Table.MetadataItem.Parser), 18);
        private readonly pbc::MapField<string, global::FactSet.Protobuf.Stach.Table.MetadataItem> tableMetadata_ = new pbc::MapField<string, global::FactSet.Protobuf.Stach.Table.MetadataItem>();
        /// <summary>
        /// The map (key: metadataitem id) of metadata at the table location
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, global::FactSet.Protobuf.Stach.Table.MetadataItem> TableMetadata {
          get { return tableMetadata_; }
        }

        /// <summary>Field number for the "column_metadata" field.</summary>
        public const int ColumnMetadataFieldNumber = 3;
        private static readonly pbc::MapField<string, global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.MapOfMetadata>.Codec _map_columnMetadata_codec
            = new pbc::MapField<string, global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.MapOfMetadata>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.MapOfMetadata.Parser), 26);
        private readonly pbc::MapField<string, global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.MapOfMetadata> columnMetadata_ = new pbc::MapField<string, global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.MapOfMetadata>();
        /// <summary>
        /// The map (key: column id) of metadata at the column location
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.MapOfMetadata> ColumnMetadata {
          get { return columnMetadata_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TableData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TableData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!rows_.Equals(other.rows_)) return false;
          if (!TableMetadata.Equals(other.TableMetadata)) return false;
          if (!ColumnMetadata.Equals(other.ColumnMetadata)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= rows_.GetHashCode();
          hash ^= TableMetadata.GetHashCode();
          hash ^= ColumnMetadata.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          rows_.WriteTo(output, _repeated_rows_codec);
          tableMetadata_.WriteTo(output, _map_tableMetadata_codec);
          columnMetadata_.WriteTo(output, _map_columnMetadata_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += rows_.CalculateSize(_repeated_rows_codec);
          size += tableMetadata_.CalculateSize(_map_tableMetadata_codec);
          size += columnMetadata_.CalculateSize(_map_columnMetadata_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TableData other) {
          if (other == null) {
            return;
          }
          rows_.Add(other.rows_);
          tableMetadata_.Add(other.tableMetadata_);
          columnMetadata_.Add(other.columnMetadata_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                rows_.AddEntriesFrom(input, _repeated_rows_codec);
                break;
              }
              case 18: {
                tableMetadata_.AddEntriesFrom(input, _map_tableMetadata_codec);
                break;
              }
              case 26: {
                columnMetadata_.AddEntriesFrom(input, _map_columnMetadata_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// A row
      /// </summary>
      public sealed partial class Row : pb::IMessage<Row> {
        private static readonly pb::MessageParser<Row> _parser = new pb::MessageParser<Row>(() => new Row());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Row> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::FactSet.Protobuf.Stach.RowOrganizedPackage.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Row() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Row(Row other) : this() {
          id_ = other.id_;
          rowType_ = other.rowType_;
          cellDetails_ = other.cellDetails_.Clone();
          headerCellDetails_ = other.headerCellDetails_.Clone();
          rowMetadata_ = other.rowMetadata_.Clone();
          switch (other.KindCase) {
            case KindOneofCase.Cells:
              Cells = other.Cells.Clone();
              break;
            case KindOneofCase.Values:
              Values = other.Values.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Row Clone() {
          return new Row(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        /// <summary>
        /// The row id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "row_type" field.</summary>
        public const int RowTypeFieldNumber = 2;
        private global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.Row.Types.RowType rowType_ = global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.Row.Types.RowType.Body;
        /// <summary>
        /// The row type
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.Row.Types.RowType RowType {
          get { return rowType_; }
          set {
            rowType_ = value;
          }
        }

        /// <summary>Field number for the "cells" field.</summary>
        public const int CellsFieldNumber = 3;
        /// <summary>
        /// The list of cell values
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.ListValue Cells {
          get { return kindCase_ == KindOneofCase.Cells ? (global::Google.Protobuf.WellKnownTypes.ListValue) kind_ : null; }
          set {
            kind_ = value;
            kindCase_ = value == null ? KindOneofCase.None : KindOneofCase.Cells;
          }
        }

        /// <summary>Field number for the "values" field.</summary>
        public const int ValuesFieldNumber = 4;
        /// <summary>
        /// The map of cell values
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Struct Values {
          get { return kindCase_ == KindOneofCase.Values ? (global::Google.Protobuf.WellKnownTypes.Struct) kind_ : null; }
          set {
            kind_ = value;
            kindCase_ = value == null ? KindOneofCase.None : KindOneofCase.Values;
          }
        }

        /// <summary>Field number for the "cell_details" field.</summary>
        public const int CellDetailsFieldNumber = 5;
        private static readonly pbc::MapField<string, global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.CellDetail>.Codec _map_cellDetails_codec
            = new pbc::MapField<string, global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.CellDetail>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.CellDetail.Parser), 42);
        private readonly pbc::MapField<string, global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.CellDetail> cellDetails_ = new pbc::MapField<string, global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.CellDetail>();
        /// <summary>
        /// The details for a body row cell
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.CellDetail> CellDetails {
          get { return cellDetails_; }
        }

        /// <summary>Field number for the "header_cell_details" field.</summary>
        public const int HeaderCellDetailsFieldNumber = 6;
        private static readonly pbc::MapField<string, global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.HeaderCellDetail>.Codec _map_headerCellDetails_codec
            = new pbc::MapField<string, global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.HeaderCellDetail>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.HeaderCellDetail.Parser), 50);
        private readonly pbc::MapField<string, global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.HeaderCellDetail> headerCellDetails_ = new pbc::MapField<string, global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.HeaderCellDetail>();
        /// <summary>
        /// The details for a header row cell
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.HeaderCellDetail> HeaderCellDetails {
          get { return headerCellDetails_; }
        }

        /// <summary>Field number for the "row_metadata" field.</summary>
        public const int RowMetadataFieldNumber = 7;
        private static readonly pbc::MapField<string, global::FactSet.Protobuf.Stach.Table.MetadataItem>.Codec _map_rowMetadata_codec
            = new pbc::MapField<string, global::FactSet.Protobuf.Stach.Table.MetadataItem>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::FactSet.Protobuf.Stach.Table.MetadataItem.Parser), 58);
        private readonly pbc::MapField<string, global::FactSet.Protobuf.Stach.Table.MetadataItem> rowMetadata_ = new pbc::MapField<string, global::FactSet.Protobuf.Stach.Table.MetadataItem>();
        /// <summary>
        /// The map (key: metadataitem id) of metadata at the row location
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, global::FactSet.Protobuf.Stach.Table.MetadataItem> RowMetadata {
          get { return rowMetadata_; }
        }

        private object kind_;
        /// <summary>Enum of possible cases for the "kind" oneof.</summary>
        public enum KindOneofCase {
          None = 0,
          Cells = 3,
          Values = 4,
        }
        private KindOneofCase kindCase_ = KindOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KindOneofCase KindCase {
          get { return kindCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearKind() {
          kindCase_ = KindOneofCase.None;
          kind_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Row);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Row other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (RowType != other.RowType) return false;
          if (!object.Equals(Cells, other.Cells)) return false;
          if (!object.Equals(Values, other.Values)) return false;
          if (!CellDetails.Equals(other.CellDetails)) return false;
          if (!HeaderCellDetails.Equals(other.HeaderCellDetails)) return false;
          if (!RowMetadata.Equals(other.RowMetadata)) return false;
          if (KindCase != other.KindCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          if (RowType != global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.Row.Types.RowType.Body) hash ^= RowType.GetHashCode();
          if (kindCase_ == KindOneofCase.Cells) hash ^= Cells.GetHashCode();
          if (kindCase_ == KindOneofCase.Values) hash ^= Values.GetHashCode();
          hash ^= CellDetails.GetHashCode();
          hash ^= HeaderCellDetails.GetHashCode();
          hash ^= RowMetadata.GetHashCode();
          hash ^= (int) kindCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (RowType != global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.Row.Types.RowType.Body) {
            output.WriteRawTag(16);
            output.WriteEnum((int) RowType);
          }
          if (kindCase_ == KindOneofCase.Cells) {
            output.WriteRawTag(26);
            output.WriteMessage(Cells);
          }
          if (kindCase_ == KindOneofCase.Values) {
            output.WriteRawTag(34);
            output.WriteMessage(Values);
          }
          cellDetails_.WriteTo(output, _map_cellDetails_codec);
          headerCellDetails_.WriteTo(output, _map_headerCellDetails_codec);
          rowMetadata_.WriteTo(output, _map_rowMetadata_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (RowType != global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.Row.Types.RowType.Body) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RowType);
          }
          if (kindCase_ == KindOneofCase.Cells) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cells);
          }
          if (kindCase_ == KindOneofCase.Values) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Values);
          }
          size += cellDetails_.CalculateSize(_map_cellDetails_codec);
          size += headerCellDetails_.CalculateSize(_map_headerCellDetails_codec);
          size += rowMetadata_.CalculateSize(_map_rowMetadata_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Row other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          if (other.RowType != global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.Row.Types.RowType.Body) {
            RowType = other.RowType;
          }
          cellDetails_.Add(other.cellDetails_);
          headerCellDetails_.Add(other.headerCellDetails_);
          rowMetadata_.Add(other.rowMetadata_);
          switch (other.KindCase) {
            case KindOneofCase.Cells:
              if (Cells == null) {
                Cells = new global::Google.Protobuf.WellKnownTypes.ListValue();
              }
              Cells.MergeFrom(other.Cells);
              break;
            case KindOneofCase.Values:
              if (Values == null) {
                Values = new global::Google.Protobuf.WellKnownTypes.Struct();
              }
              Values.MergeFrom(other.Values);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 16: {
                RowType = (global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.Row.Types.RowType) input.ReadEnum();
                break;
              }
              case 26: {
                global::Google.Protobuf.WellKnownTypes.ListValue subBuilder = new global::Google.Protobuf.WellKnownTypes.ListValue();
                if (kindCase_ == KindOneofCase.Cells) {
                  subBuilder.MergeFrom(Cells);
                }
                input.ReadMessage(subBuilder);
                Cells = subBuilder;
                break;
              }
              case 34: {
                global::Google.Protobuf.WellKnownTypes.Struct subBuilder = new global::Google.Protobuf.WellKnownTypes.Struct();
                if (kindCase_ == KindOneofCase.Values) {
                  subBuilder.MergeFrom(Values);
                }
                input.ReadMessage(subBuilder);
                Values = subBuilder;
                break;
              }
              case 42: {
                cellDetails_.AddEntriesFrom(input, _map_cellDetails_codec);
                break;
              }
              case 50: {
                headerCellDetails_.AddEntriesFrom(input, _map_headerCellDetails_codec);
                break;
              }
              case 58: {
                rowMetadata_.AddEntriesFrom(input, _map_rowMetadata_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Row message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// A type of row
          /// </summary>
          public enum RowType {
            /// <summary>
            /// A body row
            /// </summary>
            [pbr::OriginalName("Body")] Body = 0,
            /// <summary>
            /// A header row
            /// </summary>
            [pbr::OriginalName("Header")] Header = 1,
          }

        }
        #endregion

      }

      /// <summary>
      /// A body row cell detail
      /// </summary>
      public sealed partial class CellDetail : pb::IMessage<CellDetail> {
        private static readonly pb::MessageParser<CellDetail> _parser = new pb::MessageParser<CellDetail>(() => new CellDetail());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CellDetail> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::FactSet.Protobuf.Stach.RowOrganizedPackage.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CellDetail() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CellDetail(CellDetail other) : this() {
          groupLevel_ = other.groupLevel_;
          cellDefinition_ = other.cellDefinition_ != null ? other.cellDefinition_.Clone() : null;
          cellMetadata_ = other.cellMetadata_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CellDetail Clone() {
          return new CellDetail(this);
        }

        /// <summary>Field number for the "group_level" field.</summary>
        public const int GroupLevelFieldNumber = 1;
        private int groupLevel_;
        /// <summary>
        /// The group level
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int GroupLevel {
          get { return groupLevel_; }
          set {
            groupLevel_ = value;
          }
        }

        /// <summary>Field number for the "cell_definition" field.</summary>
        public const int CellDefinitionFieldNumber = 2;
        private global::FactSet.Protobuf.Stach.Table.CellDefinition cellDefinition_;
        /// <summary>
        /// The definition of the cell; overrides the column definition
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::FactSet.Protobuf.Stach.Table.CellDefinition CellDefinition {
          get { return cellDefinition_; }
          set {
            cellDefinition_ = value;
          }
        }

        /// <summary>Field number for the "cell_metadata" field.</summary>
        public const int CellMetadataFieldNumber = 3;
        private static readonly pbc::MapField<string, global::FactSet.Protobuf.Stach.Table.MetadataItem>.Codec _map_cellMetadata_codec
            = new pbc::MapField<string, global::FactSet.Protobuf.Stach.Table.MetadataItem>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::FactSet.Protobuf.Stach.Table.MetadataItem.Parser), 26);
        private readonly pbc::MapField<string, global::FactSet.Protobuf.Stach.Table.MetadataItem> cellMetadata_ = new pbc::MapField<string, global::FactSet.Protobuf.Stach.Table.MetadataItem>();
        /// <summary>
        /// The map (key: metadataitem id) of metadata at the cell location
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, global::FactSet.Protobuf.Stach.Table.MetadataItem> CellMetadata {
          get { return cellMetadata_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CellDetail);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CellDetail other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (GroupLevel != other.GroupLevel) return false;
          if (!object.Equals(CellDefinition, other.CellDefinition)) return false;
          if (!CellMetadata.Equals(other.CellMetadata)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (GroupLevel != 0) hash ^= GroupLevel.GetHashCode();
          if (cellDefinition_ != null) hash ^= CellDefinition.GetHashCode();
          hash ^= CellMetadata.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (GroupLevel != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(GroupLevel);
          }
          if (cellDefinition_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(CellDefinition);
          }
          cellMetadata_.WriteTo(output, _map_cellMetadata_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (GroupLevel != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(GroupLevel);
          }
          if (cellDefinition_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(CellDefinition);
          }
          size += cellMetadata_.CalculateSize(_map_cellMetadata_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CellDetail other) {
          if (other == null) {
            return;
          }
          if (other.GroupLevel != 0) {
            GroupLevel = other.GroupLevel;
          }
          if (other.cellDefinition_ != null) {
            if (cellDefinition_ == null) {
              CellDefinition = new global::FactSet.Protobuf.Stach.Table.CellDefinition();
            }
            CellDefinition.MergeFrom(other.CellDefinition);
          }
          cellMetadata_.Add(other.cellMetadata_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                GroupLevel = input.ReadInt32();
                break;
              }
              case 18: {
                if (cellDefinition_ == null) {
                  CellDefinition = new global::FactSet.Protobuf.Stach.Table.CellDefinition();
                }
                input.ReadMessage(CellDefinition);
                break;
              }
              case 26: {
                cellMetadata_.AddEntriesFrom(input, _map_cellMetadata_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// A header row cell detail
      /// </summary>
      public sealed partial class HeaderCellDetail : pb::IMessage<HeaderCellDetail> {
        private static readonly pb::MessageParser<HeaderCellDetail> _parser = new pb::MessageParser<HeaderCellDetail>(() => new HeaderCellDetail());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<HeaderCellDetail> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::FactSet.Protobuf.Stach.RowOrganizedPackage.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HeaderCellDetail() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HeaderCellDetail(HeaderCellDetail other) : this() {
          colspan_ = other.colspan_;
          rowspan_ = other.rowspan_;
          source_ = other.source_;
          columnIndex_ = other.columnIndex_;
          cellDefinition_ = other.cellDefinition_ != null ? other.cellDefinition_.Clone() : null;
          cellMetadata_ = other.cellMetadata_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HeaderCellDetail Clone() {
          return new HeaderCellDetail(this);
        }

        /// <summary>Field number for the "colspan" field.</summary>
        public const int ColspanFieldNumber = 1;
        private int colspan_;
        /// <summary>
        /// The column span
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Colspan {
          get { return colspan_; }
          set {
            colspan_ = value;
          }
        }

        /// <summary>Field number for the "rowspan" field.</summary>
        public const int RowspanFieldNumber = 2;
        private int rowspan_;
        /// <summary>
        /// The row span
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Rowspan {
          get { return rowspan_; }
          set {
            rowspan_ = value;
          }
        }

        /// <summary>Field number for the "source" field.</summary>
        public const int SourceFieldNumber = 3;
        private global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.HeaderCellDetail.Types.TableSource source_ = global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.HeaderCellDetail.Types.TableSource.Unknown;
        /// <summary>
        /// The table where the row is sourced from
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.HeaderCellDetail.Types.TableSource Source {
          get { return source_; }
          set {
            source_ = value;
          }
        }

        /// <summary>Field number for the "column_index" field.</summary>
        public const int ColumnIndexFieldNumber = 4;
        private int columnIndex_;
        /// <summary>
        /// The column index; used to index into the `headers_definition.columns` array
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ColumnIndex {
          get { return columnIndex_; }
          set {
            columnIndex_ = value;
          }
        }

        /// <summary>Field number for the "cell_definition" field.</summary>
        public const int CellDefinitionFieldNumber = 5;
        private global::FactSet.Protobuf.Stach.Table.CellDefinition cellDefinition_;
        /// <summary>
        /// The definition of the cell; overrides the column definition
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::FactSet.Protobuf.Stach.Table.CellDefinition CellDefinition {
          get { return cellDefinition_; }
          set {
            cellDefinition_ = value;
          }
        }

        /// <summary>Field number for the "cell_metadata" field.</summary>
        public const int CellMetadataFieldNumber = 6;
        private static readonly pbc::MapField<string, global::FactSet.Protobuf.Stach.Table.MetadataItem>.Codec _map_cellMetadata_codec
            = new pbc::MapField<string, global::FactSet.Protobuf.Stach.Table.MetadataItem>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::FactSet.Protobuf.Stach.Table.MetadataItem.Parser), 50);
        private readonly pbc::MapField<string, global::FactSet.Protobuf.Stach.Table.MetadataItem> cellMetadata_ = new pbc::MapField<string, global::FactSet.Protobuf.Stach.Table.MetadataItem>();
        /// <summary>
        /// The map (key: metadataitem id) of metadata at the cell location
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, global::FactSet.Protobuf.Stach.Table.MetadataItem> CellMetadata {
          get { return cellMetadata_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as HeaderCellDetail);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(HeaderCellDetail other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Colspan != other.Colspan) return false;
          if (Rowspan != other.Rowspan) return false;
          if (Source != other.Source) return false;
          if (ColumnIndex != other.ColumnIndex) return false;
          if (!object.Equals(CellDefinition, other.CellDefinition)) return false;
          if (!CellMetadata.Equals(other.CellMetadata)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Colspan != 0) hash ^= Colspan.GetHashCode();
          if (Rowspan != 0) hash ^= Rowspan.GetHashCode();
          if (Source != global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.HeaderCellDetail.Types.TableSource.Unknown) hash ^= Source.GetHashCode();
          if (ColumnIndex != 0) hash ^= ColumnIndex.GetHashCode();
          if (cellDefinition_ != null) hash ^= CellDefinition.GetHashCode();
          hash ^= CellMetadata.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Colspan != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Colspan);
          }
          if (Rowspan != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Rowspan);
          }
          if (Source != global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.HeaderCellDetail.Types.TableSource.Unknown) {
            output.WriteRawTag(24);
            output.WriteEnum((int) Source);
          }
          if (ColumnIndex != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(ColumnIndex);
          }
          if (cellDefinition_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(CellDefinition);
          }
          cellMetadata_.WriteTo(output, _map_cellMetadata_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Colspan != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Colspan);
          }
          if (Rowspan != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rowspan);
          }
          if (Source != global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.HeaderCellDetail.Types.TableSource.Unknown) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Source);
          }
          if (ColumnIndex != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ColumnIndex);
          }
          if (cellDefinition_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(CellDefinition);
          }
          size += cellMetadata_.CalculateSize(_map_cellMetadata_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(HeaderCellDetail other) {
          if (other == null) {
            return;
          }
          if (other.Colspan != 0) {
            Colspan = other.Colspan;
          }
          if (other.Rowspan != 0) {
            Rowspan = other.Rowspan;
          }
          if (other.Source != global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.HeaderCellDetail.Types.TableSource.Unknown) {
            Source = other.Source;
          }
          if (other.ColumnIndex != 0) {
            ColumnIndex = other.ColumnIndex;
          }
          if (other.cellDefinition_ != null) {
            if (cellDefinition_ == null) {
              CellDefinition = new global::FactSet.Protobuf.Stach.Table.CellDefinition();
            }
            CellDefinition.MergeFrom(other.CellDefinition);
          }
          cellMetadata_.Add(other.cellMetadata_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Colspan = input.ReadInt32();
                break;
              }
              case 16: {
                Rowspan = input.ReadInt32();
                break;
              }
              case 24: {
                Source = (global::FactSet.Protobuf.Stach.RowOrganizedPackage.Types.HeaderCellDetail.Types.TableSource) input.ReadEnum();
                break;
              }
              case 32: {
                ColumnIndex = input.ReadInt32();
                break;
              }
              case 42: {
                if (cellDefinition_ == null) {
                  CellDefinition = new global::FactSet.Protobuf.Stach.Table.CellDefinition();
                }
                input.ReadMessage(CellDefinition);
                break;
              }
              case 50: {
                cellMetadata_.AddEntriesFrom(input, _map_cellMetadata_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the HeaderCellDetail message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// A table where a row is sourced from
          /// </summary>
          public enum TableSource {
            [pbr::OriginalName("UNKNOWN")] Unknown = 0,
            [pbr::OriginalName("NONE")] None = 1,
            [pbr::OriginalName("PRIMARY")] Primary = 2,
            [pbr::OriginalName("HEADERS")] Headers = 3,
          }

        }
        #endregion

      }

      /// <summary>
      /// A wrapper for a map of metadata items
      /// </summary>
      public sealed partial class MapOfMetadata : pb::IMessage<MapOfMetadata> {
        private static readonly pb::MessageParser<MapOfMetadata> _parser = new pb::MessageParser<MapOfMetadata>(() => new MapOfMetadata());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MapOfMetadata> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::FactSet.Protobuf.Stach.RowOrganizedPackage.Descriptor.NestedTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MapOfMetadata() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MapOfMetadata(MapOfMetadata other) : this() {
          items_ = other.items_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MapOfMetadata Clone() {
          return new MapOfMetadata(this);
        }

        /// <summary>Field number for the "items" field.</summary>
        public const int ItemsFieldNumber = 1;
        private static readonly pbc::MapField<string, global::FactSet.Protobuf.Stach.Table.MetadataItem>.Codec _map_items_codec
            = new pbc::MapField<string, global::FactSet.Protobuf.Stach.Table.MetadataItem>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::FactSet.Protobuf.Stach.Table.MetadataItem.Parser), 10);
        private readonly pbc::MapField<string, global::FactSet.Protobuf.Stach.Table.MetadataItem> items_ = new pbc::MapField<string, global::FactSet.Protobuf.Stach.Table.MetadataItem>();
        /// <summary>
        /// The map (key: metadataitem id) metadata
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, global::FactSet.Protobuf.Stach.Table.MetadataItem> Items {
          get { return items_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MapOfMetadata);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MapOfMetadata other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!Items.Equals(other.Items)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= Items.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          items_.WriteTo(output, _map_items_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += items_.CalculateSize(_map_items_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MapOfMetadata other) {
          if (other == null) {
            return;
          }
          items_.Add(other.items_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                items_.AddEntriesFrom(input, _map_items_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
