syntax = "proto3";
package factset.protobuf.stach.v3;

option csharp_namespace = "FactSet.Protobuf.Stach.V3";
option go_package = "github.com/factset/stachschema-sdks/go/fds/protobuf/stach/v3";
option java_package = "com.factset.protobuf.stach.v3";
option java_outer_classname = "TableProto";

import "fds/protobuf/stach/v3/MetadataItem.proto";
import "fds/protobuf/stach/v3/SortColumn.proto";

/*
A state of tabular data.
If the tabular data has already been grouped, split, or a collapsed column produced, these properties are required to indicate that.
*/
message Table {
  /*
  A result of executing the grouping algorithm.
  */
  message GroupResult {
    /*
    The names of the columns that were grouped by.
    Required, unless `Table.groupResult.collapsedColumnResult.name` is specified.
    */
    repeated string by = 1;
    
    /*
    The realized collapsed column.
    Optional.
    */
    CollapsedColumnResult collapsed_column_result = 2;
    
    /*
    The name of the `string` column that contains the row paths.
    Required.
    */
    string row_path = 3;
    
    /*
    The name of the `boolean` column that indicates if a row is an aggregate row.
    Required.
    */
    string aggregate_rows = 4;
    
    /*
    The name of the `int32` column that contains the group level override.
    Takes precedence over row path length.
    Optional.
    */
    string level = 5;
  }
  
  /*
  A result of the collapsed column algorithm.
  */
  message CollapsedColumnResult {
    /*
    The name of the collapsed column.
    The collapsed column is in the data so it is considered realized and therefore needs a name.
    Required.
    */
    string name = 1;

    /*
    The columns that were collapsed.
    Optional.
    */
    repeated string by = 2;

    /*
    The original headers of the columns that were collapsed.
    Key is the original column name, and value is the original header.
    Optional.
    */
    map<string, string> headers = 3;
  }

  /*
  A result of executing the splitting algorithm.
  */
  message SplitResult {
    /*
    The name of the `string` column in the multi-level headers table that refers to column names in the primary table.
    Required.
    */
    string multi_level_headers_table_reference = 1;

    /*
    The original columns that were split by.
    Optional.
    */
    repeated string by = 2;

    /*
    The columns that were split over.
    Key is the split column name, and value is the original column name.
    Optional.
    */
    map<string, string> over = 3;
  }

  /* 
  The array of column names that define the primary key for each row.
  If more than one column is specified, it is referred to as a compound primary key. e.g. ['firstName', 'lastName'] the first name + last name makes a full name which uniquely identifies each row.
  Required.
  */
  repeated string primary_keys = 1;

  /*
  The total number of rows in the table.
  If the value is `0`, it is assumed that all rows are in the payload. If the value is greater than `0`, and the number of rows in the payload is less than the value, it is assumed that the table in the payload is a partial table.
  Default is `0`.
  Required if a payload contains partial data.
  */
  int32 total_num_rows = 2;

  /*
  The result of the grouping algorithm.
  Optional.
  */
  GroupResult group_result = 3;

  /*
  The result of the splitting algorithm.
  Optional.
  */
  SplitResult split_result = 4;

  /*
  The result of the sorting algorithm.
  Optional.
  */
  repeated SortColumn sort_result = 5;

  /*
  The custom metadata.
  Optional.
  */
  map<string, MetadataItem> custom_metadata = 100;
}