syntax = "proto3";
package factset.protobuf.stach.v3;

option csharp_namespace = "FactSet.Protobuf.Stach.V3";
option go_package = "github.com/factset/stachschema-sdks/go/fds/protobuf/stach/v3";
option java_package = "com.factset.protobuf.stach.v3";
option java_outer_classname = "TableViewProto";

import "fds/protobuf/stach/v3/MetadataItem.proto";

/*
A set of metadata specifying the settings that instruct how to turn tabular data into a rendered table.
*/
message TableView {
  /*
  An algorithm that groups tabular data by a set of columns and produces aggregate rows.
  */
  message Group {
    /*
    The names of the columns to group by.
    Required.
    */
    repeated string by = 1;

    /*
    The settings for the algorithm to create a collapsed column.
    The rendering layer should collapse the columns specified by `Group.by` or `GroupResult.by` into a collapsed column.
    Optional.
    */
    CollapsedColumn collapsed_column = 2;
  }

  /*
  A virtual collapsed column.
  */
  message CollapsedColumn {
    /*
    The alias of the collapsed column.
    The collapsed column is *not* in the data so it is considered virtual and therefore needs an alias. A dollar sign ($) prefix, such as "$collapsedColumn", can be used to indicate an alias but is not necessary.
    Required.
    */
    string alias = 1;
  }

  /*
  An algorithm that vertically splits tabular data and produces a column for each unique value in the columns that were split over.
  */
  message Split {
    /*
    The alias of the columns generated by the split algorithm.
    A dollar sign ($) prefix, such as "$splitColumns", can be used to indicate an alias but is not necessary.
    Required.
    */
    string alias = 1;
    
    /*
    The names of columns to split by.
    Required.
    */
    repeated string by = 2;

    /*
    The names of columns to include in the multi-level headers table when splitting.
    Optional.
    */
    repeated string include = 3;
    
    /*
    The names of columns to split over.
    Required.
    */
    repeated string over = 4;
    
    /*
    The human-readable header values of `over` columns to be applied.
    Key is the column name, and value is the human-readable value.
    Optional.
    */
    map<string, string> headers = 5;
    
    /*
    Whether to remove empty split columns or not.
    Default is `false`.
    Optional.
    */
    bool remove_empty_split_columns = 6;
  }

  /*
  The human readable display name for the table.
  Optional.
  */
  string display_name = 1;

  /*
  The names of columns to display, which can include the alias for the collapsed column and the alias for the split columns.
  An empty array will display no columns. The order of the column names is the order the columns will be displayed.
  Required.
  */
  repeated string columns = 2;

  /*
  The human-readable header values of columns to be applied.
  Key is the column name, and value is the human-readable header value. e.g. `{ 'mcap': 'Market Capitalization' }`
  Optional.
  */
  map<string, string> headers = 3;

  /*
  The group algorithm to be applied.
  Optional.
  */
  Group group = 4;

  /*
  The split algorithm to be applied.
  Optional.
  */
  Split split = 5;

  /*
  The custom metadata.
  Optional.
  */
  map<string, MetadataItem> custom_metadata = 100;
}